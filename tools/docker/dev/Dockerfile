ARG BASE_IMAGE_NAME
ARG BASE_IMAGE_TAG
FROM $BASE_IMAGE_NAME:$BASE_IMAGE_TAG

RUN --mount=type=secret,id=RHEL_ORG \
  --mount=type=secret,id=RHEL_ACTIVATION_KEY \
  subscription-manager register \
  --org=$(cat /run/secrets/RHEL_ORG) \
  --activationkey=$(cat /run/secrets/RHEL_ACTIVATION_KEY)

# Install tools
#
# iputils for ping
# sudo for non-root user sudo support
# vim-enhanced for color vi support in git
# wget to install vscode server
#
RUN dnf update -y \
  && dnf -y install \
  git \
  iputils \
  sudo \
  vim-enhanced \
  wget \
  && dnf clean all \
  && rm -rf /var/cache/yum

# Install root user .bashrc
COPY .bashrc /root/

# üõÇ Create the non-root (developer) user
ARG USERNAME
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# Create the user
#
# Note, most of our usernames use the `first.last` template. Having a `.` in a
# username is POSIX compliant (good). However, `sudoers.d` ignores any file
# containing a `.` as a way to disable changes; so files named `first.last` are
# simply ignored. Instead, use the `USER_UID` as the file name.
# See https://superuser.com/a/869145
#
RUN groupadd --gid $USER_GID $USERNAME \
  && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \
  && echo $USERNAME ALL=\(ALL\) NOPASSWD: ALL > /etc/sudoers.d/$USER_UID \
  && chmod 0440 /etc/sudoers.d/$USER_UID

# Specify as the default user in the WSL config
RUN printf "\n[user]\ndefault = $USERNAME\n" >> /etc/wsl.conf

# Install the .bashrc for the user
COPY --chown=$USER_UID:$USER_GID --chmod=644 .bashrc /home/$USERNAME

# üîÄ Copy user-specific git configuration
#
# Copy the global user config generated by the build script and added to the
# docker build contex.
#
COPY --chown=$USER_UID:$USER_GID .gitconfig /home/$USERNAME

# üßë‚Äçüíª Change to non-root user
USER $USERNAME

# üßë‚Äçüíª Set user global configuration, in `$HOME/.gitconfig`.

# Setup Git Credential Manager
# This works for developing on windows host workstations.
#
# See https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-git#git-credential-manager-setup
#
RUN git config --global credential.helper \
  "/mnt/c/Program\ Files/Git/mingw64/bin/git-credential-manager.exe"

RUN \
  # Never enable autocrlf
  git config --global core.autocrlf false \
  # Explicity specify the default eol to `LF`
  && git config --global core.eol lf \
  # Always rebase on pull operations, never merge.
  && git config --global pull.rebase true \
  # `fetch` will always run prune, so you never need to
  && git config --global remote.origin.prune true \
  # Adds color when showing blocks of code that moved by remain unchanged
  && git config --global diff.colorMoved zebra \
  # Set vim as the default editor. Modify as desired.
  && git config --global core.editor vim \
  # Configure `main` as default branch
  && git config --global init.defaultBranch main

CMD [ "bash" ]
